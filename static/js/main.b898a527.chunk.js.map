{"version":3,"sources":["components/AppHeader.js","helpers/constants.js","containers/Landing.js","components/App.js","serviceWorker.js","index.js"],"names":["AppHeader","brand","react_default","a","createElement","react_router_dom","className","to","react_reveal","top","lib","alignLinks","Component","revealDurations","Landing","duration","constants","bottom","l","s","offset","waves","node","href","App","AppHeader_AppHeader","Landing_Landing","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAKqBA,mLAEb,IAAMC,EACFC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,UAAU,6BAA6BC,GAAG,KAAhD,iBAKJ,OACIL,EAAAC,EAAAC,cAACI,EAAA,MAAD,CAAOC,KAAG,GACNP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,wBACXJ,EAAAC,EAAAC,cAACM,EAAA,OAAD,CAAQJ,UAAU,2BAA2BL,MAAOA,EAAOU,WAAW,mBAXnDC,aCL1BC,EAEF,ICGUC,mLAGb,OACIZ,EAAAC,EAAAC,cAACI,EAAA,MAAD,CAAOO,SAAUC,EAAmCC,QAAM,GACtDf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,0BACXJ,EAAAC,EAAAC,cAACM,EAAA,IAAD,KACIR,EAAAC,EAAAC,cAACM,EAAA,IAAD,CAAKQ,EAAG,GAAIC,EAAG,GAAIC,OAAO,MACtBlB,EAAAC,EAAAC,cAAA,MAAIE,UAAU,gBAAd,mCACAJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,gBAAd,2BACAJ,EAAAC,EAAAC,cAAA,uFACAF,EAAAC,EAAAC,cAACM,EAAA,OAAD,CAAQW,MAAM,QAAQC,KAAK,IAAIC,KAAK,+CAApC,6BAZSX,aCatBY,MAbf,WACE,OACEtB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,yBACXJ,EAAAC,EAAAC,cAACsB,EAAD,UCCMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL/B,EAAAC,EAAAC,cAAC8B,EAAD,MACAC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b898a527.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport { Navbar} from \"react-materialize\";\nimport { Link } from \"react-router-dom\";\nimport { Slide } from 'react-reveal';\n\nexport default class AppHeader extends Component {\n    render() {\n        const brand = (\n            <Link className=\"app-header-container-brand\" to=\"/\">\n              I'm A Giraffe\n            </Link>\n        );\n\n        return (\n            <Slide top>\n                <div className=\"app-header-container\">\n                    <Navbar className=\"app-header-container-nav\" brand={brand} alignLinks='right'>\n                    </Navbar>\n                </div>\n            </Slide>\n        );\n    }\n}\n","export const revealDurations = {\n  slow: 1750,\n  regular: 1000,\n  fast: 750,\n  fastest: 300\n};","import React, { Component } from \"react\";\nimport { Slide } from 'react-reveal';\nimport { Row, Col, Button } from 'react-materialize';\nimport * as constants from '../helpers/constants';\n\nexport default class Landing extends Component {\n\n    render() {\n        return (\n            <Slide duration={constants.revealDurations.regular} bottom>\n                <div className=\"landing-page-container\">\n                    <Row>\n                        <Col l={10} s={12} offset='l1'>\n                            <h2 className=\"header-style\" >Welcome to a Tower of Giraffes!</h2>\n                            <hr/>\n                            <h5 className=\"header-style\" >History Behind the Name</h5>\n                            <p>Like anything catchy, it all started with a vine and the rest was history.</p>\n                            <Button waves=\"light\" node=\"a\" href=\"https://www.youtube.com/watch?v=HRPwMBAtfTY\">Watch the Vine</Button>\n                        </Col>\n                    </Row>\n                </div>\n            </Slide>\n        );\n    }\n}\n","import React from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport AppHeader from './AppHeader';\nimport Landing from '../containers/Landing';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n          <AppHeader />\n          <div className=\"app-content-container\" >\n              <Landing/>\n          </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./styles/index.scss\";\nimport App from './components/App';\nimport { unregister } from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nunregister();\n"],"sourceRoot":""}